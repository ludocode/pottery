/*
 * MIT License
 *
 * Copyright (c) 2020-2021 11037650 Canada Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef POTTERY_HEAP_SORT_IMPL
#error "This is an internal header. Do not include it."
#endif

#include "pottery/pottery_dependencies.h"
#include "pottery/platform/pottery_platform_pragma_push.t.h"



/*
 * Configuration
 */

#ifndef POTTERY_HEAP_SORT_EXTERN
    #define POTTERY_HEAP_SORT_EXTERN /*nothing*/
#endif



/*
 * Renaming
 */

#define POTTERY_HEAP_SORT_NAME(name) POTTERY_CONCAT(POTTERY_HEAP_SORT_PREFIX, name)

#define pottery_heap_sort POTTERY_HEAP_SORT_PREFIX



// container types
#ifdef POTTERY_HEAP_SORT_EXTERNAL_CONTAINER_TYPES
    #define POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX POTTERY_HEAP_SORT_EXTERNAL_CONTAINER_TYPES
#else
    #define POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX POTTERY_HEAP_SORT_PREFIX
#endif
//!!! AUTOGENERATED:container_types/rename.m.h SRC:pottery_heap_sort DEST:POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX
    // This block is auto-generated. Do not modify until END_AUTOGENERATED.
    // Renames container_types template identifiers from pottery_heap_sort to POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX

    #define pottery_heap_sort_value_t POTTERY_CONCAT(POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX, _value_t)
    #define pottery_heap_sort_ref_t POTTERY_CONCAT(POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX, _ref_t)
    #define pottery_heap_sort_const_ref_t POTTERY_CONCAT(POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX, _const_ref_t)
    #define pottery_heap_sort_entry_t POTTERY_CONCAT(POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX, _entry_t)
    #define pottery_heap_sort_key_t POTTERY_CONCAT(POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX, _key_t)
    #define pottery_heap_sort_context_t POTTERY_CONCAT(POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX, _context_t)

    #define pottery_heap_sort_entry_ref POTTERY_CONCAT(POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX, _entry_ref)
    #define pottery_heap_sort_ref_key POTTERY_CONCAT(POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX, _ref_key)
    #define pottery_heap_sort_ref_equal POTTERY_CONCAT(POTTERY_HEAP_SORT_CONTAINER_TYPES_PREFIX, _ref_equal)
//!!! END_AUTOGENERATED



// heap
#define POTTERY_HEAP_SORT_HEAP_PREFIX POTTERY_HEAP_SORT_NAME(_heap)
//!!! AUTOGENERATED:heap/rename.m.h SRC:pottery_heap_sort_heap DEST:POTTERY_HEAP_SORT_HEAP_PREFIX
    // This block is auto-generated. Do not modify until END_AUTOGENERATED.
    // Renames heap identifiers from pottery_heap_sort_heap to POTTERY_HEAP_SORT_HEAP_PREFIX

    // internal
    #define pottery_heap_sort_heap_set_index POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _set_index)
    #define pottery_heap_sort_heap_parent POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _parent)
    #define pottery_heap_sort_heap_child_left POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _child_left)
    #define pottery_heap_sort_heap_child_right POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _child_right)
    #define pottery_heap_sort_heap_sift_down POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _sift_down)
    #define pottery_heap_sort_heap_sift_up POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _sift_up)

    // public sub-range
    #define pottery_heap_sort_heap_build_range POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _build_range)
    #define pottery_heap_sort_heap_expand_bulk_range POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _expand_bulk_range)
    #define pottery_heap_sort_heap_contract_bulk_range POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _contract_bulk_range)
    #define pottery_heap_sort_heap_contract_at_range POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _contract_at_range)
    #define pottery_heap_sort_heap_valid_count_range POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _valid_count_range)
    #define pottery_heap_sort_heap_valid_range POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _valid_range)

    // public full-range
    #define pottery_heap_sort_heap_build POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _build)
    #define pottery_heap_sort_heap_expand_bulk POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _expand_bulk)
    #define pottery_heap_sort_heap_contract_bulk POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _contract_bulk)
    #define pottery_heap_sort_heap_contract_at POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _contract_at)
    #define pottery_heap_sort_heap_valid POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _valid)
    #define pottery_heap_sort_heap_valid_count POTTERY_CONCAT(POTTERY_HEAP_SORT_HEAP_PREFIX, _valid_count)
//!!! END_AUTOGENERATED
